from database.db import Database
from aiogram import Bot
from aiogram.types import Message
import asyncio
import logging

logger = logging.getLogger(__name__)

class MailingService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()

    async def send_mailing(self, mailing_id: int, message_text: str, message_type: str = 'text', audience_type: str = 'all'):
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        users = self.db.get_users_by_audience(audience_type)
        success_count = 0
        total_users = len(users)
        
        if total_users == 0:
            logger.warning(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience_type}")
            return 0, 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_message = None
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
            # progress_message = await self.bot.send_message(chat_id=admin_id, text=f"üì® –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...\n–ê—É–¥–∏—Ç–æ—Ä–∏—è: {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            pass
        except:
            pass
        
        for i, user in enumerate(users):
            try:
                user_id = user['user_id']
                await self.bot.send_message(
                    chat_id=user_id, 
                    text=message_text,
                    parse_mode='HTML'
                )
                self.db.record_sent_mailing(mailing_id, user_id, 'sent')
                success_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
                if progress_message and i % 10 == 0:
                    progress = round((i / total_users) * 100, 1)
                    try:
                        await progress_message.edit_text(
                            f"üì® –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n"
                            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i}/{total_users}"
                        )
                    except:
                        pass
                
                await asyncio.sleep(0.05)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                self.db.record_sent_mailing(mailing_id, user_id, 'failed')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
        self.db.update_mailing_stats(mailing_id, success_count)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        if progress_message:
            try:
                await progress_message.delete()
            except:
                pass
        
        logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {mailing_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_users}")
        return success_count, total_users