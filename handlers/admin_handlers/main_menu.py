from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.config import Config
from database.db import Database
from datetime import datetime, timedelta
import asyncio

router = Router()
db = Database()

def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS

def get_admin_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats"),
            InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users_management")
        ],
        [
            InlineKeyboardButton(text="üì® –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_create_mailing"),
            InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="admin_mailing_history")
        ],
        [
            InlineKeyboardButton(text="üìà Excel –æ—Ç—á–µ—Ç", callback_data="admin_excel_report"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_refresh")
        ]
    ])
    return keyboard

async def get_dashboard_stats():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    stats = db.get_detailed_stats()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    activity_data = db.get_activity_data(7)
    user_growth = db.get_user_growth_data(7)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞
    dashboard_text = (
        "üìä <b>–î–∞—à–±–æ—Ä–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
        f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {stats['total_users']}\n"
        f"üÜï <b>–ù–æ–≤—ã—Ö –∑–∞ 24—á:</b> {stats['new_users_today']}\n"
        f"üî• <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á:</b> {stats['active_users_today']}\n\n"
        
        f"üì® <b>–†–∞—Å—Å—ã–ª–∫–∏:</b> {stats['total_mailings']}\n"
        f"‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:</b> {stats['total_sent_messages']}\n"
        f"üìà <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {round((stats['successful_deliveries']/(stats['successful_deliveries'] + stats['failed_deliveries']))*100, 2) if (stats['successful_deliveries'] + stats['failed_deliveries']) > 0 else 0}%\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
    if activity_data:
        dashboard_text += "üìà <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ 7 –¥–Ω–µ–π:</b>\n"
        for date, count in activity_data[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π
            bar = "‚ñà" * min(count // 3, 10)  # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
            dashboard_text += f"‚Ä¢ {date}: {bar} {count}\n"
    
    dashboard_text += f"\nüïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    return dashboard_text

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    dashboard_text = await get_dashboard_stats()
    
    await message.answer(
        dashboard_text,
        reply_markup=get_admin_main_menu(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "admin_refresh")
async def refresh_admin_panel(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    dashboard_text = await get_dashboard_stats()
    
    await callback.message.edit_text(
        dashboard_text,
        reply_markup=get_admin_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")