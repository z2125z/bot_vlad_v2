from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.config import Config
from services.mailing_service import MailingService
import html
from datetime import datetime

router = Router()

def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS

class MailingCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_message = State()
    waiting_for_confirmation = State()
    waiting_for_audience = State()

def get_mailing_type_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù –¢–µ–∫—Å—Ç", callback_data="mailing_type_text"),
            InlineKeyboardButton(text="üñºÔ∏è –¢–µ–∫—Å—Ç + –§–æ—Ç–æ", callback_data="mailing_type_photo")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh")
        ]
    ])

def get_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="confirm_mailing"),
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_mailing")
        ],
        [
            InlineKeyboardButton(text="üéØ –ò–∑–º–µ–Ω–∏—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é", callback_data="change_audience")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mailing")
        ]
    ])

def get_audience_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="audience_all"),
            InlineKeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="audience_active_week")
        ],
        [
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ (—Å–µ–≥–æ–¥–Ω—è)", callback_data="audience_new_today"),
            InlineKeyboardButton(text="üìà –ù–æ–≤—ã–µ (–Ω–µ–¥–µ–ª—è)", callback_data="audience_new_week")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_create_mailing")
        ]
    ])

@router.callback_query(F.data == "admin_create_mailing")
async def start_mailing_creation(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(MailingCreation.waiting_for_title)
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(MailingCreation.waiting_for_title)
async def process_mailing_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(MailingCreation.waiting_for_message)
    
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤:\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ&lt;/u&gt;</code>\n"
        "‚Ä¢ <code>&lt;a href='URL'&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;</code>",
        parse_mode="HTML"
    )

@router.message(MailingCreation.waiting_for_message)
async def process_mailing_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.html_text, message_type='text')
    await state.set_state(MailingCreation.waiting_for_audience)
    
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –≤—ã–±–∏—Ä–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é
    preview_text = (
        "üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{data['message_text'][:500]}{'...' if len(data['message_text']) > 500 else ''}\n\n"
        "üéØ <b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>"
    )
    
    await message.answer(preview_text, reply_markup=get_audience_keyboard(), parse_mode="HTML")

@router.callback_query(MailingCreation.waiting_for_audience, F.data.startswith("audience_"))
async def select_audience(callback: types.CallbackQuery, state: FSMContext):
    audience_type = callback.data.replace("audience_", "")
    audience_names = {
        "all": "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active_week": "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", 
        "new_today": "üÜï –ù–æ–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "new_week": "üìà –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é"
    }
    
    audience_count = await get_audience_count(audience_type)
    
    await state.update_data(audience_type=audience_type)
    await state.set_state(MailingCreation.waiting_for_confirmation)
    
    data = await state.get_data()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    preview_text = (
        "üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
        f"<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_names.get(audience_type)} ({audience_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{data['message_text'][:500]}{'...' if len(data['message_text']) > 500 else ''}\n\n"
        "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>"
    )
    
    await callback.message.edit_text(preview_text, reply_markup=get_confirmation_keyboard(), parse_mode="HTML")
    await callback.answer()

async def get_audience_count(audience_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    from database.db import Database
    db = Database()
    
    if audience_type == "all":
        return db.get_user_count()
    elif audience_type == "active_week":
        stats = db.get_detailed_stats()
        return stats['active_users_week']
    elif audience_type == "new_today":
        stats = db.get_detailed_stats()
        return stats['new_users_today']
    elif audience_type == "new_week":
        stats = db.get_detailed_stats()
        return stats['new_users_week']
    return 0

@router.callback_query(F.data == "confirm_mailing")
async def confirm_mailing(callback: types.CallbackQuery, state: FSMContext, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    mailing_service = MailingService(bot)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n"
        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É
    mailing_id = mailing_service.db.save_mailing(
        data['title'],
        data['message_text'], 
        data.get('message_type', 'text'),
        data.get('audience_type', 'all')
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count, total_count = await mailing_service.send_mailing(
        mailing_id, 
        data['message_text'],
        data.get('message_type', 'text'),
        data.get('audience_type', 'all')
    )
    
    delivery_rate = round((success_count/total_count)*100, 2) if total_count > 0 else 0
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì® <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
        f"üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {data.get('audience_type', 'all')}\n"
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{total_count}\n"
        f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_rate}%\n\n"
        f"üìÖ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="stats_mailings")],
            [InlineKeyboardButton(text="üì® –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_create_mailing")],
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data == "edit_mailing")
async def edit_mailing(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(MailingCreation.waiting_for_message)
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "change_audience")
async def change_audience(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(MailingCreation.waiting_for_audience)
    await callback.message.edit_text(
        "üéØ <b>–í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_audience_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "cancel_mailing")
async def cancel_mailing(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )