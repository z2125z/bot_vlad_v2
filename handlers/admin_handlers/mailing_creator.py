from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext  # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from config.config import Config
from services.mailing_service import MailingService
from database.db import Database
from datetime import datetime  # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å
import os

router = Router()
db = Database()

def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS

class MailingCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_message = State()
    waiting_for_media = State()
    waiting_for_media_type = State()
    waiting_for_confirmation = State()
    waiting_for_audience = State()

def get_media_type_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üñºÔ∏è –§–æ—Ç–æ", callback_data="media_photo"),
            InlineKeyboardButton(text="üìπ –í–∏–¥–µ–æ", callback_data="media_video")
        ],
        [
            InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç", callback_data="media_document"),
            InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ", callback_data="media_audio")
        ],
        [
            InlineKeyboardButton(text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ", callback_data="media_voice"),
            InlineKeyboardButton(text="üé≠ GIF/–ê–Ω–∏–º–∞—Ü–∏—è", callback_data="media_animation")
        ],
        [
            InlineKeyboardButton(text="üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="media_none"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_mailing")
        ]
    ])

def get_confirmation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω", callback_data="save_template"),
            InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="edit_text"),
            InlineKeyboardButton(text="üñºÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data="edit_media")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_mailing")
        ]
    ])

def get_audience_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="audience_all"),
            InlineKeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="audience_active_week")
        ],
        [
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ (—Å–µ–≥–æ–¥–Ω—è)", callback_data="audience_new_today"),
            InlineKeyboardButton(text="üìà –ù–æ–≤—ã–µ (–Ω–µ–¥–µ–ª—è)", callback_data="audience_new_week")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_create_mailing")
        ]
    ])

@router.callback_query(F.data == "admin_create_mailing")
async def start_mailing_creation(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(MailingCreation.waiting_for_title)
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö):",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(MailingCreation.waiting_for_title)
async def process_mailing_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(MailingCreation.waiting_for_message)
    
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–≥–æ–≤:\n"
        "‚Ä¢ <code>&lt;b&gt;–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
        "‚Ä¢ <code>&lt;i&gt;–∫—É—Ä—Å–∏–≤&lt;/i&gt;</code>\n"
        "‚Ä¢ <code>&lt;u&gt;–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ&lt;/u&gt;</code>\n"
        "‚Ä¢ <code>&lt;a href='URL'&gt;—Å—Å—ã–ª–∫–∞&lt;/a&gt;</code>",
        parse_mode="HTML"
    )

@router.message(MailingCreation.waiting_for_message)
async def process_mailing_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.html_text)
    await state.set_state(MailingCreation.waiting_for_media_type)
    
    await message.answer(
        "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç, –∞—É–¥–∏–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ GIF-–∞–Ω–∏–º–∞—Ü–∏—é.",
        reply_markup=get_media_type_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(MailingCreation.waiting_for_media_type, F.data.startswith("media_"))
async def select_media_type(callback: types.CallbackQuery, state: FSMContext):
    media_type = callback.data.replace("media_", "")
    
    if media_type == "none":
        await state.update_data(media_type=None, media_file_id=None)
        await state.set_state(MailingCreation.waiting_for_audience)
        await process_audience_selection(callback, state)
        return
    
    await state.update_data(media_type=media_type)
    await state.set_state(MailingCreation.waiting_for_media)
    
    media_types = {
        "photo": "üñºÔ∏è –§–æ—Ç–æ",
        "video": "üìπ –í–∏–¥–µ–æ", 
        "document": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç",
        "audio": "üéµ –ê—É–¥–∏–æ",
        "voice": "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "animation": "üé≠ GIF/–ê–Ω–∏–º–∞—Ü–∏—è"
    }
    
    await callback.message.edit_text(
        f"üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_types[media_type]}:</b>\n\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —ç—Ç–æ—Ç —á–∞—Ç. –ë–æ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç –µ–≥–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(MailingCreation.waiting_for_media)
async def process_media_upload(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_type = data.get('media_type')
    
    file_id = None
    message_type = 'text'
    
    try:
        if media_type == "photo" and message.photo:
            file_id = message.photo[-1].file_id
            message_type = 'photo'
        elif media_type == "video" and message.video:
            file_id = message.video.file_id
            message_type = 'video'
        elif media_type == "document" and message.document:
            file_id = message.document.file_id
            message_type = 'document'
        elif media_type == "audio" and message.audio:
            file_id = message.audio.file_id
            message_type = 'audio'
        elif media_type == "voice" and message.voice:
            file_id = message.voice.file_id
            message_type = 'voice'
        elif media_type == "animation" and message.animation:
            file_id = message.animation.file_id
            message_type = 'animation'
        
        if file_id:
            await state.update_data(media_file_id=file_id, message_type=message_type)
            await state.set_state(MailingCreation.waiting_for_audience)
            await process_audience_selection(message, state)
        else:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞</b>\n\n"
                f"–û–∂–∏–¥–∞–µ—Ç—Å—è {media_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –º–µ–¥–∏–∞.",
                parse_mode="HTML",
                reply_markup=get_media_type_keyboard()
            )
            await state.set_state(MailingCreation.waiting_for_media_type)
            
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞:</b> {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø –º–µ–¥–∏–∞.",
            parse_mode="HTML",
            reply_markup=get_media_type_keyboard()
        )
        await state.set_state(MailingCreation.waiting_for_media_type)

async def process_audience_selection(update, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if isinstance(update, types.CallbackQuery):
        message = update.message
    else:
        message = update
    
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    preview_text = await generate_preview_text(data)
    
    await message.answer(
        preview_text,
        reply_markup=get_audience_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(MailingCreation.waiting_for_audience, F.data.startswith("audience_"))
async def select_audience(callback: types.CallbackQuery, state: FSMContext):
    audience_type = callback.data.replace("audience_", "")
    audience_names = {
        "all": "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active_week": "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", 
        "new_today": "üÜï –ù–æ–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "new_week": "üìà –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é"
    }
    
    audience_count = await get_audience_count(audience_type)
    
    await state.update_data(audience_type=audience_type)
    await state.set_state(MailingCreation.waiting_for_confirmation)
    
    data = await state.get_data()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    preview_text = await generate_preview_text(data, audience_type, audience_count)
    
    await callback.message.edit_text(
        preview_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

async def generate_preview_text(data, audience_type=None, audience_count=None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    text = "üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
    text += f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
    
    if audience_type and audience_count is not None:
        audience_names = {
            "all": "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
            "active_week": "üî• –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é", 
            "new_today": "üÜï –ù–æ–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è",
            "new_week": "üìà –ù–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é"
        }
        text += f"<b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_names.get(audience_type)} ({audience_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
    
    media_type = data.get('media_type')
    if media_type:
        media_types = {
            "photo": "üñºÔ∏è –§–æ—Ç–æ",
            "video": "üìπ –í–∏–¥–µ–æ",
            "document": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç", 
            "audio": "üéµ –ê—É–¥–∏–æ",
            "voice": "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ",
            "animation": "üé≠ GIF/–ê–Ω–∏–º–∞—Ü–∏—è"
        }
        text += f"<b>–ú–µ–¥–∏–∞:</b> {media_types.get(media_type, media_type)}\n"
    
    text += f"<b>–¢–µ–∫—Å—Ç:</b>\n{data['message_text'][:500]}{'...' if len(data['message_text']) > 500 else ''}\n\n"
    
    if audience_type:
        text += "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>"
    else:
        text += "üéØ <b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>"
    
    return text

async def get_audience_count(audience_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    from database.db import Database
    db = Database()
    
    if audience_type == "all":
        return db.get_user_count()
    elif audience_type == "active_week":
        stats = db.get_detailed_stats()
        return stats['active_users_week']
    elif audience_type == "new_today":
        stats = db.get_detailed_stats()
        return stats['new_users_today']
    elif audience_type == "new_week":
        stats = db.get_detailed_stats()
        return stats['new_users_week']
    return 0

@router.callback_query(F.data == "save_template")
async def save_as_template(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —à–∞–±–ª–æ–Ω
    template_id = db.save_mailing(
        title=data['title'],
        message_text=data['message_text'],
        message_type=data.get('message_type', 'text'),
        media_type=data.get('media_type'),
        media_file_id=data.get('media_file_id'),
        audience_type=data.get('audience_type', 'all'),
        is_template=True
    )
    
    await callback.message.edit_text(
        f"üíæ <b>–®–∞–±–ª–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
        f"üìù <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
        f"üÜî <b>ID —à–∞–±–ª–æ–Ω–∞:</b> {template_id}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìÅ –®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫\".",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now")],
            [InlineKeyboardButton(text="üìÅ –ú–æ–∏ —à–∞–±–ª–æ–Ω—ã", callback_data="admin_templates")],
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data == "send_now")
async def send_mailing_now(callback: types.CallbackQuery, state: FSMContext, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    mailing_service = MailingService(bot)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n"
        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–Ω–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω)
    mailing_id = db.save_mailing(
        title=data['title'],
        message_text=data['message_text'],
        message_type=data.get('message_type', 'text'),
        media_type=data.get('media_type'),
        media_file_id=data.get('media_file_id'),
        audience_type=data.get('audience_type', 'all'),
        is_template=False
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count, total_count = await mailing_service.send_mailing(
        mailing_id, 
        data['message_text'],
        data.get('message_type', 'text'),
        data.get('media_type'),
        data.get('media_file_id'),
        data.get('audience_type', 'all')
    )
    
    delivery_rate = round((success_count/total_count)*100, 2) if total_count > 0 else 0
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì® <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {data['title']}\n"
        f"üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {data.get('audience_type', 'all')}\n"
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{total_count}\n"
        f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_rate}%\n\n"
        f"üìÖ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="stats_mailings")],
            [InlineKeyboardButton(text="üì® –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_create_mailing")],
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(F.data == "edit_text")
async def edit_mailing_text(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(MailingCreation.waiting_for_message)
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "edit_media")
async def edit_mailing_media(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(MailingCreation.waiting_for_media_type)
    await callback.message.edit_text(
        "üé® <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞-–≤–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –º–µ–¥–∏–∞:",
        reply_markup=get_media_type_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "cancel_mailing")
async def cancel_mailing(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )