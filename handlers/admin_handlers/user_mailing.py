from aiogram import Router, types, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext  
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.config import Config
from database.db import Database
from services.mailing_service import MailingService
from datetime import datetime


router = Router()
db = Database()

def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS

class UserMailing(StatesGroup):
    selecting_audience = State()
    writing_message = State()
    confirmation = State()

def get_audience_selection_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="audience_all"),
            InlineKeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ–¥–µ–ª—è)", callback_data="audience_active_week")
        ],
        [
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ (—Å–µ–≥–æ–¥–Ω—è)", callback_data="audience_new_today"),
            InlineKeyboardButton(text="üìà –ù–æ–≤—ã–µ (–Ω–µ–¥–µ–ª—è)", callback_data="audience_new_week")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh")
        ]
    ])

@router.callback_query(F.data == "admin_users_management")
async def user_management_menu(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì® –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="user_mailing_start"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="stats_users")
        ],
        [
            InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list"),
            InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞", callback_data="user_growth_chart")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh")
        ]
    ])
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@router.callback_query(F.data == "user_mailing_start")
async def start_user_mailing(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    await state.set_state(UserMailing.selecting_audience)
    
    stats = db.get_detailed_stats()
    
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['new_users_today']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['active_users_week']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_audience_selection_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(UserMailing.selecting_audience, F.data.startswith("audience_"))
async def select_audience(callback: types.CallbackQuery, state: FSMContext):
    audience_type = callback.data.replace("audience_", "")
    audience_names = {
        "all": "–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "active_week": "–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é",
        "new_today": "–Ω–æ–≤—ã–µ —Å–µ–≥–æ–¥–Ω—è",
        "new_week": "–Ω–æ–≤—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é"
    }
    
    await state.update_data(audience_type=audience_type)
    await state.set_state(UserMailing.writing_message)
    
    await callback.message.edit_text(
        f"üéØ <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_names.get(audience_type, audience_type)}\n\n"
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É.",
        parse_mode="HTML"
    )

@router.message(UserMailing.writing_message)
async def process_user_mailing_message(message: types.Message, state: FSMContext):
    await state.update_data(message_text=message.html_text)
    await state.set_state(UserMailing.confirmation)
    
    data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    user_count = await get_audience_count(data['audience_type'])
    
    await message.answer(
        f"üëÅÔ∏è <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {data['audience_type']} ({user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)\n"
        f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{data['message_text']}\n\n"
        "‚úÖ <i>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_user_mailing"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_user_mailing")
            ]
        ]),
        parse_mode="HTML"
    )

@router.callback_query(UserMailing.confirmation, F.data == "confirm_user_mailing")
async def confirm_user_mailing(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    data = await state.get_data()
    
 # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    from main import bot
    mailing_service = MailingService(bot)
        
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n"
        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    mailing_id = db.save_mailing(
        title=f"–ë—ã—Å—Ç—Ä–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ - {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        message_text=data['message_text'],
        message_type='text',
        audience_type=data['audience_type'],
        is_template=False
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count, total_count = await mailing_service.send_mailing(
        mailing_id, 
        data['message_text'],
        'text',
        None,
        None,
        data['audience_type']
    )
    
    delivery_rate = round((success_count/total_count)*100, 2) if total_count > 0 else 0
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {data['audience_type']}\n"
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{total_count}\n"
        f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_rate}%\n\n"
        f"üìÖ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="stats_mailings")],
            [InlineKeyboardButton(text="üì® –ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", callback_data="user_mailing_start")],
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )
    
    await state.clear()

@router.callback_query(UserMailing.confirmation, F.data == "cancel_user_mailing")
async def cancel_user_mailing(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )

async def get_audience_count(audience_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if audience_type == "all":
        return db.get_user_count()
    elif audience_type == "active_week":
        stats = db.get_detailed_stats()
        return stats['active_users_week']
    elif audience_type == "new_today":
        stats = db.get_detailed_stats()
        return stats['new_users_today']
    elif audience_type == "new_week":
        stats = db.get_detailed_stats()
        return stats['new_users_week']
    return 0