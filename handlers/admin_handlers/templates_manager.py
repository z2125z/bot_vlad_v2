from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database.db import Database
from config.config import Config
from services.mailing_service import MailingService
from datetime import datetime  # –î–û–ë–ê–í–ò–¢–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢

router = Router()
db = Database()

def is_admin(user_id: int) -> bool:
    return user_id in Config.ADMIN_IDS

async def safe_edit_message(callback: types.CallbackQuery, text: str, keyboard: InlineKeyboardMarkup = None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        if "message is not modified" in str(e):
            await callback.answer()
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

def get_templates_keyboard(templates, page=0, templates_per_page=5):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤"""
    start_idx = page * templates_per_page
    end_idx = start_idx + templates_per_page
    current_templates = templates[start_idx:end_idx]
    
    buttons = []
    for template in current_templates:
        media_icon = "üñºÔ∏è" if template['media_type'] else "üìù"
        button_text = f"{media_icon} {template['title'][:30]}{'...' if len(template['title']) > 30 else ''}"
        buttons.append([InlineKeyboardButton(
            text=button_text, 
            callback_data=f"template_{template['id']}"
        )])
    
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"templates_page_{page-1}"))
    
    if end_idx < len(templates):
        navigation_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"templates_page_{page+1}"))
    
    if navigation_buttons:
        buttons.append(navigation_buttons)
    
    buttons.append([InlineKeyboardButton(text="üì® –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="admin_create_mailing")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "admin_templates")
async def show_templates_list(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    templates = db.get_all_templates()
    
    if not templates:
        await safe_edit_message(
            callback,
            "üìÅ <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —à–∞–±–ª–æ–Ω –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ —Ä–∞—Å—Å—ã–ª–æ–∫!",
            InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì® –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="admin_create_mailing")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_refresh")]
            ])
        )
        return

    await safe_edit_message(
        callback,
        f"üìÅ <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        f"–í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {len(templates)}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        get_templates_keyboard(templates)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("templates_page_"))
async def show_templates_page(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    page = int(callback.data.split("_")[-1])
    templates = db.get_all_templates()
    
    await safe_edit_message(
        callback,
        f"üìÅ <b>–®–∞–±–ª–æ–Ω—ã —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        get_templates_keyboard(templates, page)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("template_"))
async def show_template_details(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    template_id = int(callback.data.split("_")[1])
    template = db.get_template_by_id(template_id)
    
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
    media_info = ""
    if template['media_type']:
        media_types = {
            "photo": "üñºÔ∏è –§–æ—Ç–æ",
            "video": "üìπ –í–∏–¥–µ–æ",
            "document": "üìÑ –î–æ–∫—É–º–µ–Ω—Ç",
            "audio": "üéµ –ê—É–¥–∏–æ", 
            "voice": "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ",
            "animation": "üé≠ GIF/–ê–Ω–∏–º–∞—Ü–∏—è"
        }
        media_info = f"<b>–ú–µ–¥–∏–∞:</b> {media_types.get(template['media_type'])}\n"
    
    text = (
        f"üìÑ <b>–®–∞–±–ª–æ–Ω #{template['id']}</b>\n\n"
        f"<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫:</b> {template['title']}\n"
        f"{media_info}"
        f"<b>–¢–µ–∫—Å—Ç:</b>\n{template['message_text'][:300]}{'...' if len(template['message_text']) > 300 else ''}\n\n"
        f"<b>–°–æ–∑–¥–∞–Ω:</b> {template['created_at'][:16]}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"send_template_{template_id}")],
        [InlineKeyboardButton(text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data=f"preview_template_{template_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_template_{template_id}")],
        [InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —à–∞–±–ª–æ–Ω–æ–≤", callback_data="admin_templates")]
    ])
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("preview_template_"))
async def preview_template(callback: types.CallbackQuery, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    template_id = int(callback.data.split("_")[2])
    template = db.get_template_by_id(template_id)
    
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if template['media_type'] and template['media_file_id']:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å
            media_methods = {
                'photo': bot.send_photo,
                'video': bot.send_video,
                'document': bot.send_document,
                'audio': bot.send_audio,
                'voice': bot.send_voice,
                'animation': bot.send_animation
            }
            
            if template['media_type'] in media_methods:
                await media_methods[template['media_type']](
                    chat_id=callback.from_user.id,
                    **{template['media_type']: template['media_file_id']},
                    caption=template['message_text'],
                    parse_mode='HTML'
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(
                chat_id=callback.from_user.id,
                text=template['message_text'],
                parse_mode='HTML'
            )
        
        await callback.answer("üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {str(e)}")

@router.callback_query(F.data.startswith("send_template_"))
async def send_template_mailing(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    template_id = int(callback.data.split("_")[2])
    template = db.get_template_by_id(template_id)
    
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —à–∞–±–ª–æ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    await state.update_data(
        title=template['title'],
        message_text=template['message_text'],
        message_type=template['message_type'],
        media_type=template['media_type'],
        media_file_id=template['media_file_id'],
        template_id=template_id
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    audience_count = await get_audience_count('all')
    
    text = (
        f"üì® <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —à–∞–±–ª–æ–Ω–∞:</b> {template['title']}\n\n"
        f"üìù <b>–¢–∏–ø:</b> {template['message_type']}\n"
        f"üë• <b>–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {audience_count}\n\n"
        "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:</b>"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=f"send_audience_all_{template_id}"),
            InlineKeyboardButton(text="üî• –ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data=f"send_audience_active_week_{template_id}")
        ],
        [
            InlineKeyboardButton(text="üÜï –ù–æ–≤—ã–µ (—Å–µ–≥–æ–¥–Ω—è)", callback_data=f"send_audience_new_today_{template_id}"),
            InlineKeyboardButton(text="üìà –ù–æ–≤—ã–µ (–Ω–µ–¥–µ–ª—è)", callback_data=f"send_audience_new_week_{template_id}")
        ],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"template_{template_id}")]
    ])
    
    await safe_edit_message(callback, text, keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("send_audience_"))
async def send_template_to_audience(callback: types.CallbackQuery, bot):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    parts = callback.data.split("_")
    audience_type = parts[2]
    template_id = int(parts[3])
    
    template = db.get_template_by_id(template_id)
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    mailing_service = MailingService(bot)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback.message.edit_text(
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...</b>\n\n"
        "‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...",
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É (–Ω–µ –∫–∞–∫ —à–∞–±–ª–æ–Ω)
    mailing_id = db.save_mailing(
        title=template['title'],
        message_text=template['message_text'],
        message_type=template['message_type'],
        media_type=template['media_type'],
        media_file_id=template['media_file_id'],
        audience_type=audience_type,
        is_template=False
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success_count, total_count = await mailing_service.send_mailing(
        mailing_id, 
        template['message_text'],
        template['message_type'],
        template['media_type'],
        template['media_file_id'],
        audience_type
    )
    
    delivery_rate = round((success_count/total_count)*100, 2) if total_count > 0 else 0
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üì® <b>–®–∞–±–ª–æ–Ω:</b> {template['title']}\n"
        f"üéØ <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_type}\n"
        f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {success_count}/{total_count}\n"
        f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_rate}%\n\n"
        f"üìÖ <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫", callback_data="stats_mailings")],
            [InlineKeyboardButton(text="üìÅ –î—Ä—É–≥–∏–µ —à–∞–±–ª–æ–Ω—ã", callback_data="admin_templates")],
            [InlineKeyboardButton(text="üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_refresh")]
        ]),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("delete_template_"))
async def delete_template(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    template_id = int(callback.data.split("_")[2])
    template = db.get_template_by_id(template_id)
    
    if not template:
        await callback.answer("‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –£–¥–∞–ª—è–µ–º —à–∞–±–ª–æ–Ω (–ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ-—à–∞–±–ª–æ–Ω)
    db.update_template_status(template_id, False)
    
    await callback.answer("‚úÖ –®–∞–±–ª–æ–Ω —É–¥–∞–ª–µ–Ω")
    await show_templates_list(callback)

async def get_audience_count(audience_type):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    if audience_type == "all":
        return db.get_user_count()
    elif audience_type == "active_week":
        stats = db.get_detailed_stats()
        return stats['active_users_week']
    elif audience_type == "new_today":
        stats = db.get_detailed_stats()
        return stats['new_users_today']
    elif audience_type == "new_week":
        stats = db.get_detailed_stats()
        return stats['new_users_week']
    return 0